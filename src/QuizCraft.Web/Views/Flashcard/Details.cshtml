@model QuizCraft.Application.ViewModels.FlashcardViewModel
@using QuizCraft.Core.Enums

@{
    ViewBag.Title = $"Detalles - {Model.Pregunta}";
    ViewBag.PageTitle = "Detalles de Flashcard";
    ViewBag.PageSubtitle = "Información completa de la tarjeta de estudio";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="mb-1">
            <i class="fas fa-info-circle text-info me-2"></i>
            Detalles de Flashcard
        </h2>
        <p class="text-muted mb-0">
            <i class="fas fa-eye me-1"></i>
            Información completa de la tarjeta de estudio
        </p>
    </div>
    <div>
        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning me-2">
            <i class="fas fa-edit me-1"></i>
            Editar
        </a>
        <a asp-action="Index" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left me-1"></i>
            Volver a la lista
        </a>
    </div>
</div>

<!-- Información principal de la flashcard -->
<div class="row">
    <div class="col-lg-8">
        <!-- Tarjeta principal con pregunta y respuesta -->
        <div class="card shadow-lg border-0 mb-4" style="border-left: 5px solid @Model.MateriaColor !important;">
            <div class="card-header d-flex justify-content-between align-items-center" 
                 style="background: linear-gradient(135deg, @Model.MateriaColor 0%, @Model.MateriaColor 100%); opacity: 0.1;">
                <div class="d-flex align-items-center">
                    <i class="@Model.MateriaIcono fa-lg me-2" style="color: @Model.MateriaColor;"></i>
                    <h5 class="mb-0" style="color: @Model.MateriaColor;">@Model.MateriaNombre</h5>
                </div>
                <div class="d-flex align-items-center gap-2">
                    @{
                        var difficultyClass = Model.Dificultad switch
                        {
                            NivelDificultad.MuyFacil => "success",
                            NivelDificultad.Facil => "info", 
                            NivelDificultad.Intermedio => "warning",
                            NivelDificultad.Dificil => "orange",
                            NivelDificultad.MuyDificil => "danger",
                            _ => "secondary"
                        };
                    }
                    <span class="badge bg-@difficultyClass fs-6 px-3 py-2">
                        <i class="fas fa-signal me-1"></i>
                        @Model.DificultadTexto
                    </span>
                    @if (Model.EstaActiva)
                    {
                        <span class="badge bg-success fs-6 px-3 py-2">
                            <i class="fas fa-check-circle me-1"></i>
                            Activa
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary fs-6 px-3 py-2">
                            <i class="fas fa-pause-circle me-1"></i>
                            Inactiva
                        </span>
                    }
                </div>
            </div>
            
            <!-- Pregunta -->
            <div class="card-body">
                <div class="mb-4">
                    <h6 class="text-primary mb-2">
                        <i class="fas fa-question-circle me-2"></i>
                        Pregunta
                    </h6>
                    <div class="p-4 bg-light rounded-3 border-start border-primary border-3">
                        <p class="mb-0 fs-5 text-dark">@Model.Pregunta</p>
                    </div>
                </div>
                
                <!-- Respuesta (inicialmente oculta para simular estudio) -->
                <div class="mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="text-success mb-0">
                            <i class="fas fa-check-circle me-2"></i>
                            Respuesta
                        </h6>
                        <button type="button" class="btn btn-outline-success btn-sm" id="toggleRespuesta">
                            <i class="fas fa-eye me-1"></i>
                            Mostrar Respuesta
                        </button>
                    </div>
                    <div class="p-4 bg-light rounded-3 border-start border-success border-3" id="respuestaContainer" style="display: none;">
                        <p class="mb-0 fs-5 text-dark">@Model.Respuesta</p>
                    </div>
                    <div id="respuestaPlaceholder" class="p-4 bg-secondary bg-opacity-10 rounded-3 text-center text-muted">
                        <i class="fas fa-eye-slash fa-2x mb-2"></i>
                        <p class="mb-0">Click en "Mostrar Respuesta" para revelar la respuesta</p>
                    </div>
                </div>
                
                <!-- Pista (si existe) -->
                @if (!string.IsNullOrEmpty(Model.Pista))
                {
                    <div class="mb-4">
                        <h6 class="text-warning mb-2">
                            <i class="fas fa-lightbulb me-2"></i>
                            Pista
                        </h6>
                        <div class="p-3 bg-warning bg-opacity-10 rounded-3 border-start border-warning border-3">
                            <p class="mb-0">@Model.Pista</p>
                        </div>
                    </div>
                }
                
                <!-- Botones de acción de estudio -->
                <div class="d-flex gap-2 justify-content-center mt-4" id="botonesEstudio" style="display: none;">
                    <button type="button" class="btn btn-success" onclick="registrarRespuesta(true)">
                        <i class="fas fa-thumbs-up me-1"></i>
                        Correcta
                    </button>
                    <button type="button" class="btn btn-warning" onclick="registrarRespuesta(false)">
                        <i class="fas fa-thumbs-down me-1"></i>
                        Incorrecta
                    </button>
                    <button type="button" class="btn btn-info" onclick="marcarDificil()">
                        <i class="fas fa-flag me-1"></i>
                        Difícil
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Botones de navegación y acciones -->
        <div class="d-flex justify-content-between align-items-center">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary" onclick="iniciarRepaso()">
                    <i class="fas fa-play me-1"></i>
                    Iniciar Repaso
                </button>
                <a asp-controller="Quiz" asp-action="Create" asp-route-materiaId="@Model.MateriaId" class="btn btn-outline-warning">
                    <i class="fas fa-question-circle me-1"></i>
                    Crear Quiz
                </a>
                <button type="button" class="btn btn-outline-info" onclick="duplicarFlashcard()">
                    <i class="fas fa-copy me-1"></i>
                    Duplicar
                </button>
            </div>
            
            <div class="btn-group" role="group">
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                    <i class="fas fa-edit me-1"></i>
                    Editar
                </a>
                <button type="button" class="btn btn-danger" onclick="confirmarEliminacion()">
                    <i class="fas fa-trash me-1"></i>
                    Eliminar
                </button>
            </div>
        </div>
    </div>
    
    <!-- Panel lateral con información adicional -->
    <div class="col-lg-4">
        <!-- Estadísticas de la flashcard -->
        <div class="card mb-4">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-chart-bar text-info me-2"></i>
                    Estadísticas de Estudio
                </h6>
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-6 mb-3">
                        <div class="border rounded p-3">
                            <h4 class="text-primary mb-1">@Model.VecesRepasada</h4>
                            <small class="text-muted">Veces Repasada</small>
                        </div>
                    </div>
                    <div class="col-6 mb-3">
                        <div class="border rounded p-3">
                            <h4 class="text-@difficultyClass mb-1">@((int)Model.Dificultad)/5</h4>
                            <small class="text-muted">Dificultad</small>
                        </div>
                    </div>
                </div>
                
                @if (Model.UltimaVezRepasada.HasValue)
                {
                    <hr>
                    <div class="text-center">
                        <small class="text-muted">
                            <i class="fas fa-clock me-1"></i>
                            Último repaso: @Model.UltimaVezRepasada.Value.ToString("dd/MM/yyyy HH:mm")
                        </small>
                    </div>
                }
            </div>
        </div>
        
        <!-- Información de la materia -->
        <div class="card mb-4">
            <div class="card-header" style="background-color: @Model.MateriaColor; opacity: 0.1;">
                <h6 class="mb-0" style="color: @Model.MateriaColor;">
                    <i class="@Model.MateriaIcono me-2"></i>
                    Información de Materia
                </h6>
            </div>
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <div class="rounded-circle d-flex align-items-center justify-content-center me-3" 
                         style="width: 50px; height: 50px; background-color: @Model.MateriaColor; opacity: 0.2;">
                        <i class="@Model.MateriaIcono fa-lg" style="color: @Model.MateriaColor;"></i>
                    </div>
                    <div>
                        <h6 class="mb-1">@Model.MateriaNombre</h6>
                        <small class="text-muted">Materia Principal</small>
                    </div>
                </div>
                
                <div class="d-grid">
                    <a href="#" class="btn btn-outline-primary btn-sm" onclick="verOtrasFlashcards()">
                        <i class="fas fa-layer-group me-1"></i>
                        Ver otras flashcards
                    </a>
                </div>
            </div>
        </div>
        
        <!-- Información temporal -->
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-calendar text-secondary me-2"></i>
                    Información Temporal
                </h6>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <small class="text-muted d-block">Fecha de Creación</small>
                    <strong>@Model.FechaCreacion.ToString("dd 'de' MMMM 'de' yyyy")</strong>
                    <br>
                    <small class="text-muted">@Model.FechaCreacion.ToString("HH:mm")</small>
                </div>
                
                @if (Model.FechaModificacion.HasValue)
                {
                    <div class="mb-3">
                        <small class="text-muted d-block">Última Modificación</small>
                        <strong>@Model.FechaModificacion.Value.ToString("dd 'de' MMMM 'de' yyyy")</strong>
                        <br>
                        <small class="text-muted">@Model.FechaModificacion.Value.ToString("HH:mm")</small>
                    </div>
                }
                
                <div class="text-center">
                    <span class="badge bg-@(Model.EstaActiva ? "success" : "secondary")">
                        <i class="fas fa-@(Model.EstaActiva ? "check" : "pause")-circle me-1"></i>
                        @(Model.EstaActiva ? "Flashcard Activa" : "Flashcard Inactiva")
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let respuestaMostrada = false;
        
        document.addEventListener('DOMContentLoaded', function() {
            const toggleBtn = document.getElementById('toggleRespuesta');
            const respuestaContainer = document.getElementById('respuestaContainer');
            const respuestaPlaceholder = document.getElementById('respuestaPlaceholder');
            const botonesEstudio = document.getElementById('botonesEstudio');
            
            toggleBtn.addEventListener('click', function() {
                if (!respuestaMostrada) {
                    // Mostrar respuesta
                    respuestaPlaceholder.style.display = 'none';
                    respuestaContainer.style.display = 'block';
                    botonesEstudio.style.display = 'flex';
                    toggleBtn.innerHTML = '<i class="fas fa-eye-slash me-1"></i>Ocultar Respuesta';
                    toggleBtn.classList.remove('btn-outline-success');
                    toggleBtn.classList.add('btn-outline-secondary');
                    respuestaMostrada = true;
                } else {
                    // Ocultar respuesta
                    respuestaContainer.style.display = 'none';
                    respuestaPlaceholder.style.display = 'block';
                    botonesEstudio.style.display = 'none';
                    toggleBtn.innerHTML = '<i class="fas fa-eye me-1"></i>Mostrar Respuesta';
                    toggleBtn.classList.remove('btn-outline-secondary');
                    toggleBtn.classList.add('btn-outline-success');
                    respuestaMostrada = false;
                }
            });
        });
        
        function registrarRespuesta(correcta) {
            const mensaje = correcta ? 
                '¡Excelente! Has respondido correctamente.' : 
                'No te preocupes, la práctica hace al maestro.';
            
            alert(mensaje + ' La respuesta ha sido registrada.');
            
            // Aquí podrías hacer una llamada AJAX para registrar la respuesta
            // fetch('/Flashcard/RegistrarRespuesta', { ... });
        }
        
        function marcarDificil() {
            if (confirm('¿Deseas marcar esta flashcard como difícil para revisarla más frecuentemente?')) {
                alert('Flashcard marcada como difícil. Aparecerá más frecuentemente en los repasos.');
                
                // Aquí podrías hacer una llamada AJAX para marcar como difícil
                // fetch('/Flashcard/MarcarDificil', { ... });
            }
        }
        
        function iniciarRepaso() {
            // Redirigir al sistema de repaso filtrando por esta materia
            window.location.href = '@Url.Action("Repaso", new { materiaId = Model.MateriaId })';
        }
        
        function duplicarFlashcard() {
            if (confirm('¿Deseas crear una copia de esta flashcard que puedas modificar?')) {
                window.location.href = '@Url.Action("Create", new { duplicarDe = Model.Id })';
            }
        }
        
        function verOtrasFlashcards() {
            window.location.href = '@Url.Action("Index", new { materiaId = Model.MateriaId })';
        }
        
        function confirmarEliminacion() {
            const mensaje = `¿Estás seguro de que deseas eliminar esta flashcard?\n\n` +
                           `Pregunta: "@Model.Pregunta"\n\n` +
                           `Esta acción no se puede deshacer.`;
            
            if (confirm(mensaje)) {
                // Crear formulario para enviar DELETE
                const form = document.createElement('form');
                form.method = 'post';
                form.action = '@Url.Action("Delete", new { id = Model.Id })';
                
                const methodField = document.createElement('input');
                methodField.type = 'hidden';
                methodField.name = '_method';
                methodField.value = 'delete';
                form.appendChild(methodField);
                
                const tokenField = document.createElement('input');
                tokenField.type = 'hidden';
                tokenField.name = '__RequestVerificationToken';
                tokenField.value = $('input[name="__RequestVerificationToken"]').val();
                form.appendChild(tokenField);
                
                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
}

@section Styles {
    <style>
        .badge.bg-orange {
            background-color: #fd7e14 !important;
        }
        
        .text-orange {
            color: #fd7e14 !important;
        }
        
        .border-3 {
            border-width: 3px !important;
        }
        
        .card {
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }
        
        .btn-group .btn {
            transition: all 0.2s ease;
        }
        
        .btn-group .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        #respuestaContainer,
        #botonesEstudio {
            animation: fadeIn 0.3s ease;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .rounded-circle {
            transition: all 0.3s ease;
        }
        
        .rounded-circle:hover {
            transform: scale(1.1);
        }
    </style>
}