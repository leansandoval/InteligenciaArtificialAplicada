@model QuizCraft.Application.ViewModels.TakeQuizViewModel
@{
    ViewData["Title"] = "Realizar Quiz: " + Model.Titulo;
}

<div class="container-fluid quiz-take-container">
    <div class="row justify-content-center align-items-center min-vh-100">
        <div class="col-lg-8 col-xl-7">
            <!-- Header del Quiz -->
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h4 class="mb-0">@Model.Titulo</h4>
                            <small class="opacity-75">@Model.MateriaNombre</small>
                        </div>
                        <div class="col-md-4 text-end">
                            @if (Model.TiempoLimite > 0)
                            {
                                <div class="d-flex align-items-center justify-content-end">
                                    <i class="fas fa-clock me-2"></i>
                                    <span id="cronometro" class="fs-5 fw-bold">@(Model.TiempoLimite):00</span>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body py-2">
                    <div class="progress" style="height: 8px;">
                        <div class="progress-bar bg-success" role="progressbar" 
                             style="width: 0%" id="progreso"></div>
                    </div>
                    <div class="d-flex justify-content-between mt-2">
                        <small class="text-muted">
                            Pregunta <span id="preguntaActual">1</span> de @Model.TotalPreguntas
                        </small>
                        <small class="text-muted">
                            Progreso: <span id="porcentajeProgreso">0</span>%
                        </small>
                    </div>
                </div>
            </div>

            <!-- Pregunta Actual -->
            <div class="card shadow-sm" id="preguntaCard">
                <div class="card-body">
                    <div id="preguntaContenido">
                        <!-- Aquí se carga dinámicamente cada pregunta -->
                    </div>

                    <!-- Controles de navegación -->
                    <div class="d-flex justify-content-between mt-4" id="navegacionControles">
                        <button type="button" class="btn btn-outline-secondary" id="btnAnterior" disabled>
                            <i class="fas fa-arrow-left me-1"></i>
                            Anterior
                        </button>
                        
                        <div class="text-center">
                            <small class="text-muted">
                                <i class="fas fa-lightbulb me-1"></i>
                                Selecciona una respuesta para continuar
                            </small>
                        </div>

                        <button type="button" class="btn btn-primary" id="btnSiguiente" disabled>
                            Siguiente
                            <i class="fas fa-arrow-right ms-1"></i>
                        </button>
                    </div>

                    <!-- Feedback de respuesta -->
                    <div id="feedbackRespuesta" class="mt-3" style="display: none;">
                        <!-- Aquí se muestra el feedback después de responder -->
                    </div>
                </div>
            </div>

            <!-- Modal de confirmación de envío -->
            <div class="modal fade" id="modalConfirmacion" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-check-circle text-success me-2"></i>
                                Finalizar Quiz
                            </h5>
                        </div>
                        <div class="modal-body">
                            <p>¿Estás seguro de que quieres finalizar el quiz?</p>
                            <div class="alert alert-info">
                                <small>
                                    <strong>Resumen:</strong><br>
                                    • Preguntas respondidas: <span id="preguntasRespondidas">0</span> de @Model.TotalPreguntas<br>
                                    • Tiempo transcurrido: <span id="tiempoTranscurrido">00:00</span>
                                </small>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                Cancelar
                            </button>
                            <button type="button" class="btn btn-success" id="btnFinalizarQuiz">
                                <i class="fas fa-flag-checkered me-1"></i>
                                Finalizar Quiz
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let quizData = @Html.Raw(Json.Serialize(Model));
        let preguntaActual = 0;
        let respuestasUsuario = {};
        let tiempoInicio = new Date();
        let cronometroInterval;
        let tiempoPreguntaInicio = new Date();
        let quizFinalizado = false;

        // Función para manejar el evento beforeunload
        function handleBeforeUnload(e) {
            if (!quizFinalizado) {
                e.preventDefault();
                e.returnValue = '¿Estás seguro de que quieres salir? Se perderá tu progreso.';
                return '¿Estás seguro de que quieres salir? Se perderá tu progreso.';
            }
        }

        $(document).ready(function() {
            // Debug mejorado
            console.log('QuizData completo:', quizData);
            console.log('TotalPreguntas:', quizData.totalPreguntas || quizData.TotalPreguntas);
            console.log('Preguntas array length:', quizData.preguntas?.length || quizData.Preguntas?.length || 0);
            console.log('NumeroPreguntas:', quizData.numeroPreguntas || quizData.NumeroPreguntas);
            
            // Normalizar nombres de propiedades
            if (!quizData.totalPreguntas && quizData.TotalPreguntas) {
                quizData.totalPreguntas = quizData.TotalPreguntas;
            }
            if (!quizData.preguntas && quizData.Preguntas) {
                quizData.preguntas = quizData.Preguntas;
            }
            
            inicializarQuiz();
            mostrarPregunta(0);
            
            if (quizData.tiempoLimite > 0) {
                iniciarCronometro();
            }
        });

        function inicializarQuiz() {
            // Configurar eventos
            $('#btnSiguiente').click(function() {
                // Usar la propiedad correcta para verificar si es la última pregunta
                const totalPreguntas = quizData.totalPreguntas || quizData.preguntas?.length || 0;
                
                console.log('Botón siguiente presionado. PreguntaActual:', preguntaActual, 'TotalPreguntas:', totalPreguntas);
                
                if (preguntaActual < totalPreguntas - 1) {
                    console.log('Navegando a siguiente pregunta...');
                    siguientePregunta();
                } else {
                    console.log('Mostrando modal de confirmación...');
                    mostrarModalConfirmacion();
                }
            });

            $('#btnAnterior').click(function() {
                if (preguntaActual > 0) {
                    anteriorPregunta();
                }
            });

            $('#btnFinalizarQuiz').click(function() {
                console.log('Botón finalizar presionado');
                finalizarQuiz();
            });

            // Agregar el event listener correctamente
            window.addEventListener('beforeunload', handleBeforeUnload);
        }

        function mostrarPregunta(indice) {
            // Validación mejorada
            const totalPreguntas = quizData.totalPreguntas || quizData.preguntas?.length || 0;
            
            console.log('mostrarPregunta llamada con índice:', indice, 'Total preguntas:', totalPreguntas);
            
            if (indice < 0 || indice >= totalPreguntas || !quizData.preguntas || !quizData.preguntas[indice]) {
                console.error('Índice de pregunta inválido:', indice, 'Total:', totalPreguntas);
                return;
            }

            const pregunta = quizData.preguntas[indice];
            preguntaActual = indice;
            tiempoPreguntaInicio = new Date();
            
            console.log('Mostrando pregunta:', pregunta);

            // Actualizar UI
            $('#preguntaActual').text(indice + 1);
            
            // Usar el total correcto para el porcentaje
            const porcentaje = Math.round(((indice + 1) / totalPreguntas) * 100);
            $('#porcentajeProgreso').text(porcentaje);
            $('#progreso').css('width', porcentaje + '%');

            // Construir HTML de la pregunta
            let html = `
                <div class="mb-4">
                    <h5 class="mb-3">
                        <span class="badge bg-primary me-2">${indice + 1}</span>
                        ${pregunta.textoPregunta || pregunta.TextoPregunta}
                    </h5>
                    <div class="row">
            `;

            // Usar la propiedad correcta para las opciones
            const opciones = pregunta.opciones || pregunta.Opciones || [];
            
            if (opciones.length > 0) {
                opciones.forEach((opcion, i) => {
                    const letra = String.fromCharCode(65 + i); // A, B, C, D
                    const preguntaId = pregunta.id || pregunta.Id;
                    const opcionValor = opcion.valor || opcion.Valor;
                    const opcionTexto = opcion.texto || opcion.Texto;
                    const isSelected = respuestasUsuario[preguntaId] === opcionValor;
                    
                    html += `
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input opcion-radio" type="radio" 
                                       name="respuesta_${preguntaId}" 
                                       value="${opcionValor}" 
                                       id="opcion_${preguntaId}_${i}"
                                       ${isSelected ? 'checked' : ''}>
                                <label class="form-check-label w-100" for="opcion_${preguntaId}_${i}">
                                    <div class="border rounded p-3 opcion-label ${isSelected ? 'bg-light border-primary' : ''}">
                                        <strong>${letra})</strong> ${opcionTexto}
                                    </div>
                                </label>
                            </div>
                        </div>
                    `;
                });
            } else {
                // Fallback a opciones directas si no hay array de opciones
                const opcionesDirectas = [
                    { letra: 'A', texto: pregunta.opcionA || pregunta.OpcionA },
                    { letra: 'B', texto: pregunta.opcionB || pregunta.OpcionB },
                    { letra: 'C', texto: pregunta.opcionC || pregunta.OpcionC },
                    { letra: 'D', texto: pregunta.opcionD || pregunta.OpcionD }
                ].filter(op => op.texto && op.texto.trim());

                const preguntaId = pregunta.id || pregunta.Id;
                opcionesDirectas.forEach((opcion, i) => {
                    const isSelected = respuestasUsuario[preguntaId] === opcion.letra;
                    html += `
                        <div class="col-md-6 mb-3">
                            <div class="form-check">
                                <input class="form-check-input opcion-radio" type="radio" 
                                       name="respuesta_${preguntaId}" 
                                       value="${opcion.letra}" 
                                       id="opcion_${preguntaId}_${i}"
                                       ${isSelected ? 'checked' : ''}>
                                <label class="form-check-label w-100" for="opcion_${preguntaId}_${i}">
                                    <div class="border rounded p-3 opcion-label ${isSelected ? 'bg-light border-primary' : ''}">
                                        <strong>${opcion.letra})</strong> ${opcion.texto}
                                    </div>
                                </label>
                            </div>
                        </div>
                    `;
                });
            }

            html += '</div></div>';
            $('#preguntaContenido').html(html);

            // Configurar eventos de las opciones
            $('.opcion-radio').change(function() {
                const preguntaId = pregunta.id || pregunta.Id;
                const respuestaSeleccionada = $(this).val();
                
                // Guardar respuesta
                respuestasUsuario[preguntaId] = respuestaSeleccionada;
                
                // Actualizar UI
                $('.opcion-label').removeClass('bg-light border-primary');
                $(this).closest('.form-check').find('.opcion-label').addClass('bg-light border-primary');
                
                // Habilitar botón siguiente
                $('#btnSiguiente').prop('disabled', false);
                $('.navegacion-ayuda').html('<i class="fas fa-check text-success me-1"></i>Respuesta seleccionada');

                // Si mostrar respuestas inmediato está habilitado
                if (quizData.mostrarRespuestasInmediato || quizData.MostrarRespuestasInmediato) {
                    setTimeout(() => {
                        mostrarFeedback(preguntaId, respuestaSeleccionada);
                    }, 500);
                }
            });

            // Actualizar controles de navegación
            const preguntaId = pregunta.id || pregunta.Id;
            $('#btnAnterior').prop('disabled', indice === 0);
            $('#btnSiguiente').prop('disabled', !respuestasUsuario[preguntaId]);
            
            // Actualizar texto del botón siguiente
            if (indice === totalPreguntas - 1) {
                $('#btnSiguiente').html('<i class="fas fa-flag-checkered me-1"></i>Finalizar');
            } else {
                $('#btnSiguiente').html('Siguiente <i class="fas fa-arrow-right ms-1"></i>');
            }

            // Ocultar feedback previo
            $('#feedbackRespuesta').hide();
        }

        function mostrarFeedback(preguntaId, respuestaSeleccionada) {
            // Por ahora, no enviamos respuestas individuales al servidor
            // Solo guardamos las respuestas localmente para enviarlas al final
            console.log('Respuesta guardada:', preguntaId, respuestaSeleccionada);
            
            // Si se quiere mostrar feedback inmediato, se puede implementar aquí
            // usando la lógica local del quiz
        }

        function mostrarFeedbackUI(response) {
            let feedbackClass = response.esCorrecta ? 'alert-success' : 'alert-danger';
            let icono = response.esCorrecta ? 'fa-check-circle' : 'fa-times-circle';
            
            let html = `
                <div class="alert ${feedbackClass} d-flex align-items-center">
                    <i class="fas ${icono} fa-2x me-3"></i>
                    <div>
                        <strong>${response.esCorrecta ? '¡Correcto!' : 'Incorrecto'}</strong><br>
                        <small>${response.explicacion}</small>
                    </div>
                </div>
            `;
            
            $('#feedbackRespuesta').html(html).show();
        }

        function siguientePregunta() {
            const totalPreguntas = quizData.totalPreguntas || quizData.preguntas?.length || 0;
            if (preguntaActual < totalPreguntas - 1) {
                mostrarPregunta(preguntaActual + 1);
            }
        }

        function anteriorPregunta() {
            if (preguntaActual > 0) {
                mostrarPregunta(preguntaActual - 1);
            }
        }

        function mostrarModalConfirmacion() {
            const preguntasRespondidas = Object.keys(respuestasUsuario).length;
            const totalPreguntas = quizData.totalPreguntas || quizData.preguntas?.length || 0;
            const tiempoTranscurrido = Math.round((new Date() - tiempoInicio) / 1000 / 60);
            
            $('#preguntasRespondidas').text(preguntasRespondidas + ' de ' + totalPreguntas);
            $('#tiempoTranscurrido').text(tiempoTranscurrido + ' min');
            
            $('#modalConfirmacion').modal('show');
        }

        // Variables de control para evitar múltiples envíos
        let enviandoQuiz = false;
        let quizEnviado = false;

        function finalizarQuiz() {
            console.log('Iniciando finalizarQuiz()');
            
            // Marcar como finalizado ANTES de hacer cualquier otra cosa
            quizFinalizado = true;
            
            // Detener cronómetro
            if (cronometroInterval) {
                clearInterval(cronometroInterval);
                console.log('Cronómetro detenido');
            }

            // Remover el event listener correctamente
            window.removeEventListener('beforeunload', handleBeforeUnload);
            console.log('Event listener removido');

            // Cerrar modal si está abierto
            $('#modalConfirmacion').modal('hide');

            // Obtener datos necesarios
            const tiempoTranscurrido = Math.round((new Date() - tiempoInicio) / 1000);
            const quizId = quizData.quizId || quizData.QuizId || quizData.id || quizData.Id;
            
            console.log('Datos del quiz:', {
                quizId: quizId,
                respuestasUsuario: respuestasUsuario,
                tiempoTranscurrido: tiempoTranscurrido
            });

            try {
                // Crear formulario para envío POST más robusto
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("SubmitQuiz", "Quiz")';
                form.style.display = 'none';

                // Token anti-falsificación
                const tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = $('input[name="__RequestVerificationToken"]').val();
                form.appendChild(tokenInput);

                // ID del quiz
                const quizIdInput = document.createElement('input');
                quizIdInput.type = 'hidden';
                quizIdInput.name = 'QuizId';
                quizIdInput.value = quizId;
                form.appendChild(quizIdInput);

                // Respuestas del usuario
                const respuestasInput = document.createElement('input');
                respuestasInput.type = 'hidden';
                respuestasInput.name = 'RespuestasUsuario';
                respuestasInput.value = JSON.stringify(respuestasUsuario);
                form.appendChild(respuestasInput);

                // Tiempo transcurrido
                const tiempoInput = document.createElement('input');
                tiempoInput.type = 'hidden';
                tiempoInput.name = 'TiempoTranscurrido';
                tiempoInput.value = tiempoTranscurrido;
                form.appendChild(tiempoInput);

                // Agregar al DOM y enviar
                document.body.appendChild(form);
                
                console.log('Enviando formulario...');
                form.submit();

            } catch (error) {
                console.error('Error al crear formulario:', error);
                
                // FALLBACK: Redirección simple si falla el formulario
                alert('Ocurrió un error al procesar el quiz. Serás redirigido a la página principal.');
                window.location.href = '@Url.Action("Details", "Quiz")/' + quizId;
            }
        }

        function iniciarCronometro() {
            let tiempoRestante = quizData.tiempoLimite * 60; // convertir a segundos
            
            cronometroInterval = setInterval(function() {
                tiempoRestante--;
                
                const minutos = Math.floor(tiempoRestante / 60);
                const segundos = tiempoRestante % 60;
                
                $('#cronometro').text(
                    minutos.toString().padStart(2, '0') + ':' + 
                    segundos.toString().padStart(2, '0')
                );
                
                // Cambiar color cuando queda poco tiempo
                if (tiempoRestante <= 300) { // 5 minutos
                    $('#cronometro').removeClass('text-white').addClass('text-warning');
                }
                if (tiempoRestante <= 60) { // 1 minuto
                    $('#cronometro').removeClass('text-warning').addClass('text-danger');
                }
                
                // Tiempo agotado
                if (tiempoRestante <= 0) {
                    clearInterval(cronometroInterval);
                    alert('¡Tiempo agotado! El quiz se finalizará automáticamente.');
                    finalizarQuiz();
                }
            }, 1000);
        }
    </script>
}

@section Styles {
    <style>
        .opcion-label {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .opcion-label:hover {
            background-color: #f8f9fa !important;
            border-color: #6c757d !important;
        }
        
        .form-check-input:checked + .form-check-label .opcion-label {
            background-color: #e3f2fd !important;
            border-color: #2196f3 !important;
            box-shadow: 0 0 0 0.2rem rgba(33, 150, 243, 0.25);
        }
        
        .progress {
            background-color: #e9ecef;
        }
        
        #cronometro {
            font-family: 'Courier New', monospace;
            letter-spacing: 1px;
        }
        
        .card {
            border: none;
        }
        
        .navegacion-ayuda {
            color: #6c757d;
            font-size: 0.875rem;
        }
    </style>
}